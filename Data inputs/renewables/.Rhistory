MPE <- c(MPE, calc.MPE(data[[i]][,actual.meas], data[[i]][,model.meas]))
MFB <- c(MFB, calc.MFB(data[[i]][,actual.meas], data[[i]][,model.meas]))
MFE <- c(MFE, calc.MFE(data[[i]][,actual.meas], data[[i]][,model.meas]))
}
PM.errors <- data.frame(YEAR = years, OBS = c(nrow(data[[1]]), nrow(data[[2]]), nrow(data[[3]])),
COR = PM.cor, rMSE = rMSE, MPE = MPE, MFB = MFB, MFE = MFE)
PM.errors <- round(PM.errors, 3)
return(PM.errors)
}
# NH4.PM <- llply(annual.species.PM, subset, subset = Parameter.Name == "Ammonium Ion PM2.5 LC")
NH4.PM <- llply(annual.species.PM, subset, subset = Parameter.Code == "88301")
for(i in 1:3){
names(NH4.PM[[i]])[names(NH4.PM[[i]]) == "annual.PM"] <- "NH4.PM.monitor"
NH4.PM[[i]] <- merge(model.PM[[i]], NH4.PM[[i]][,c("fips", "NH4.PM.monitor")], by = "fips")
}
NH4.errors <- error.table(NH4.PM, "NH4.PM.monitor", "NH4")
kable(NH4.errors, caption = "Model error for Ammonium PM")
#SO4.PM <- llply(annual.species.PM, subset, subset = Parameter.Name == "Sulfate PM2.5 LC")
SO4.PM <- llply(annual.species.PM, subset, subset = Parameter.Code == "88403")
for(i in 1:3){
names(SO4.PM[[i]])[names(SO4.PM[[i]]) == "annual.PM"] <- "SO4.PM.monitor"
SO4.PM[[i]] <- merge(model.PM[[i]], SO4.PM[[i]][,c("fips", "SO4.PM.monitor")], by = "fips")
}
SO4.errors <- error.table(SO4.PM, "SO4.PM.monitor", "SO4")
kable(SO4.errors, caption = "Model error for Sulfate PM")
#NO3.PM <- llply(annual.species.PM, subset, subset = Parameter.Name == "Total Nitrate PM2.5 LC")
NO3.PM <- llply(annual.species.PM, subset, subset = Parameter.Code == "88306")
for(i in 1:3){
names(NO3.PM[[i]])[names(NO3.PM[[i]]) == "annual.PM"] <- "NO3.PM.monitor"
NO3.PM[[i]] <- merge(model.PM[[i]], NO3.PM[[i]][,c("fips", "NO3.PM.monitor")], by = "fips")
}
NO3.errors <- error.table(NO3.PM, "NO3.PM.monitor", "NO3")
kable(NO3.errors, caption = "Model error for Nitrate PM")
primary.PM <- llply(annual.species.PM, subset, subset = Parameter.Name == "EC CSN_Rev Unadjusted PM2.5 LC TOR")
primary.PM <- llply(annual.species.PM, subset, subset = Parameter.Code == "88380")
# other candidates: EC CSN PM2.5 LC TOT, EC CSN_Rev Unadjusted PM2.5 LC TOT, EC CSN_Rev Unadjusted PM2.5 LC TOR
for(i in 1:3){
names(primary.PM[[i]])[names(primary.PM[[i]]) == "annual.PM"] <- "Primary.PM.monitor"
primary.PM[[i]] <- merge(model.PM[[i]], primary.PM[[i]][,c("fips", "Primary.PM.monitor")], by = "fips")
}
primary.PM.errors <- error.table(primary.PM, "Primary.PM.monitor", "PM25-PRI")
kable(primary.PM.errors, caption = "Model error for EC (primary PM)")
#organic.PM <- llply(annual.species.PM, subset, subset = Parameter.Name == "OC PM2.5 LC TOR")
#organic.PM <- llply(annual.species.PM, subset, subset = Parameter.Name %in% c("OC CSN_Rev Unadjusted PM2.5 LC TOR",
#                                                                              "OC CSN_Rev Unadjusted PM2.5 LC TOT"))
organic.PM <- llply(annual.species.PM, subset, subset = Parameter.Code %in% c(88370, 88355, 88304, 88320, 88332, 88334, 88335))
#organic.PM[[3]] <- subset(annual.species.PM[[3]],  subset = Parameter.Name %in% c("OC CSN_Rev Unadjusted PM2.5 LC TOR",
#                                                                                  "OC CSN_Rev Unadjusted PM2.5 LC TOT"))
organic.PM[[1]] <- ddply(organic.PM[[1]], ~ fips, summarize, annual.PM = mean(annual.PM, na.rm=T))
organic.PM[[2]] <- ddply(organic.PM[[2]], ~ fips, summarize, annual.PM = mean(annual.PM, na.rm=T))
organic.PM[[3]] <- ddply(organic.PM[[3]], ~ fips, summarize, annual.PM = mean(annual.PM, na.rm=T))
# organic.PM <- llply(annual.species.PM, subset, subset = Parameter.Name %in% c("OC1 CSN Unadjusted PM2.5 LC TOT",
#                                                                               "OC2 CSN Unadjusted PM2.5 LC TOT",
#                                                                               "OC3 CSN Unadjusted PM2.5 LC TOT",
#                                                                               "OC4 CSN Unadjusted PM2.5 LC TOT"))
#
# for(i in 1:3){
#   organic.PM[[i]] <- ddply(organic.PM[[i]], ~ fips, summarize, annual.PM = sum(annual.PM))
# }
#  OC1 CSN Unadjusted PM2.5 LC TOT, OC2 CSN Unadjusted PM2.5 LC TOT, OC3 CSN Unadjusted PM2.5 LC TOT, OC4 CSN Unadjusted PM2.5 LC TOT,
for(i in 1:3){
names(organic.PM[[i]])[names(organic.PM[[i]]) == "annual.PM"] <- "organic.PM.monitor"
organic.PM[[i]] <- merge(model.PM[[i]], organic.PM[[i]][,c("fips", "organic.PM.monitor")], by = "fips")
organic.PM[[i]]$VOC_C <- organic.PM[[i]]$VOC_A + organic.PM[[i]]$VOC_B
}
organic.errors <- error.table(organic.PM, "organic.PM.monitor", "VOC_C")
kable(organic.errors, caption = "Model error for VOCs (organic only?)")
head(NH4.PM[[1]])
species.means <- function(data, measure.name, actual.name){
obs <- nrow(data)
mean.measure <- mean(data[,measure.name])
mean.actual <- mean(data[,actual.name])
return(obs = obs, model = mean.measure, monitor = mean.actual)
}
head(NH4.PM[[1]])
species.means(NH4.PM[[1]], "NH4", "NH4.PM.monitor")
species.means <- function(data, measure.name, actual.name){
obs <- nrow(data)
mean.measure <- mean(data[,measure.name])
mean.actual <- mean(data[,actual.name])
return(obs = obs, model = mean.measure, monitor = mean.actual)
}
species.means(NH4.PM[[1]], "NH4", "NH4.PM.monitor")
species.means <- function(data, measure.name, actual.name){
obs <- nrow(data)
mean.measure <- mean(data[,measure.name])
mean.actual <- mean(data[,actual.name])
return(data.frame(obs = obs, model = mean.measure, monitor = mean.actual))
}
species.means(NH4.PM[[1]], "NH4", "NH4.PM.monitor")
test <- species.means(NH4.PM[[1]], "NH4", "NH4.PM.monitor")
test
species.means <- function(data, measure.name, actual.name){
obs <- nrow(data)
mean.measure <- mean(data[,measure.name])
mean.actual <- mean(data[,actual.name])
results <- data.frame(obs = obs, model = mean.measure, monitor = mean.actual)
rownames(results) <- measure.name
return(results)
}
test <- species.means(NH4.PM[[1]], "NH4", "NH4.PM.monitor")
test
head(SO2.PM[[1]])
head(SO4.PM[[1]])
head(NO3.PM[[1]])
head(primary.PM)
head(primary.PM[[1]])
head(organic.PM)
head(organic.PM[[1]])
head(PM.validate[[1]])
?pdf
load("/Users/Cartographer/Documents/Carnegie Mellon/Box Sync/Research/Environmental justice/County shares results V2.RData")
head(shares[[1]])
stats
install.packages("pdftools")
library("pdftools")
library(xlsx)
remove.packages("xlsx")
install.packages("xlsx")
library(xlsx)
library(openxlsx)
install.packages('rJava')
library(openxlsx)
library(xlsx)
library(xlsx)
CI_old <- 870  # lbs per MWh
CI_old <- CI_old / 2000 / 1000   # 2000 lbs/ ton, 1000 kWh/MWh    (lbs/MWh) * (tons/lbs) * (MWh/kWh) = tons/kWh
93/12*44
carbon.emissions <- function(efficiency){
output <- (frac.carbon * 1/heating.value * g.to.kg * MJ.to.kWh)/efficiency
return(output)
}
# thermodynamic limit
temp.low <- 300
temp.high <- 2300
theoretical.eff <- (1 - temp.low/temp.high)*100
two.temp <- (1-temp.low*log(temp.high/temp.low)/(temp.high-temp.low))*100
# ultra critical plant
ultra <- carbon.emissions(0.46)
heating.value <- 24
# MJ/kg
frac.carbon <- 0.62
# kg to g C
g.to.kg <- 1000
# MJ to kWh
MJ.to.kWh <- 3.6
# calculation
carbon.emissions.rate <-frac.carbon * 1/heating.value * g.to.kg * MJ.to.kWh
output <- carbon.emissions.rate / eff
cost_old <- 7.7 / 100    # $ per kWh
cost_new <- 9.49 / 100    # $ per kWh
mitCost <- (cost_new - cost_old) / (CI_old - CI_new)
eff <- 3412/9000
heating.value <- 24
# MJ/kg
frac.carbon <- 0.62
# kg to g C
g.to.kg <- 1000
# MJ to kWh
MJ.to.kWh <- 3.6
# calculation
carbon.emissions.rate <-frac.carbon * 1/heating.value * g.to.kg * MJ.to.kWh
output <- carbon.emissions.rate / eff
carbon.emissions <- function(efficiency){
output <- (frac.carbon * 1/heating.value * g.to.kg * MJ.to.kWh)/efficiency
return(output)
}
# thermodynamic limit
temp.low <- 300
temp.high <- 2300
theoretical.eff <- (1 - temp.low/temp.high)*100
two.temp <- (1-temp.low*log(temp.high/temp.low)/(temp.high-temp.low))*100
# ultra critical plant
ultra <- carbon.emissions(0.46)
ultra
1.79/0.1973
1.79/0.1973*970
3.6/24*0.62
3412/9000
3.6/24*0.62/0.615
3.6/24*0.62/0.615*1000
3.6/24*0.62/0.69*1000
heating.value <- 24
# MJ/kg
frac.carbon <- 0.62
# kg to g C
g.to.kg <- 1000
# MJ to kWh
MJ.to.kWh <- 3.6
# calculation
carbon.emissions.rate <-frac.carbon * 1/heating.value * g.to.kg * MJ.to.kWh
output <- carbon.emissions.rate / eff
eff <- 3412/9000
heating.value <- 24
# MJ/kg
frac.carbon <- 0.62
# kg to g C
g.to.kg <- 1000
# MJ to kWh
MJ.to.kWh <- 3.6
# calculation
carbon.emissions.rate <-frac.carbon * 1/heating.value * g.to.kg * MJ.to.kWh
output <- carbon.emissions.rate / eff
output
carbon.emissions <- function(efficiency){
output <- (frac.carbon * 1/heating.value * g.to.kg * MJ.to.kWh)/efficiency
return(output)
}
# thermodynamic limit
temp.low <- 300
temp.high <- 2300
theoretical.eff <- (1 - temp.low/temp.high)*100
two.temp <- (1-temp.low*log(temp.high/temp.low)/(temp.high-temp.low))*100
# ultra critical plant
ultra <- carbon.emissions(0.46)
ultra
(0.1243-0.0405)/(257.14)
(0.1243-0.0405)/(257.14)*1000
3600/4624
38/40
shiny::runApp('Documents/Carnegie Mellon/Box Sync/Research/Environmental justice/Shiny app/DamageMaps')
load("/Users/Cartographer/Documents/Carnegie Mellon/Box Sync/Research/CACES energy modeling/Model V3/Analysis results.RData")
str(summaryResults)
summaryResults
summaryResults[,"health"] / 1E9
117846584927 - 11665971668
(117846584927 - 11665971668)/1E9
(88204012288 - 7868711770) / 1E9
(34331106056- 3395857987)/1E9
106E9 / 9E6
summaryResults[summaryResults$scenario == "Health + Climate",]
summaryResults[summaryResults$scenario == "Health + Climate", "health"]
summaryResults[summaryResults$scenario == "Health + Climate", "health"]/1E9
summaryResults[summaryResults$scenario == "Baseline", "health"]/1E9
summaryResults[summaryResults$scenario == "Climate", "health"]/1E9
summaryResults[summaryResults$scenario == "Climate-only", "health"]/1E9
46+73
summaryResults
summaryResults[, "cost"]
summaryResults[, "health"] - summaryResults[, "cost"]
(summaryResults[, "health"] - summaryResults[, "cost"]) / 1E9
summaryResults[summaryResults$scenario == "Climate-only",]
summaryResults[summaryResults$scenario == "Climate-only", "climate"]
summaryResults[summaryResults$scenario == "Climate-only", "climate"] -summaryResults[summaryResults$scenario == "Climate-only", "climate"]
summaryResults[summaryResults$scenario == "Baseline", "climate"] -summaryResults[summaryResults$scenario == "Climate-only", "climate"]
(summaryResults[summaryResults$scenario == "Baseline", "climate"] -summaryResults[summaryResults$scenario == "Climate-only", "climate"]) - summaryResults[summaryResults$scenario == "Climate-only", "costs"]
(summaryResults[summaryResults$scenario == "Baseline", "climate"] -summaryResults[summaryResults$scenario == "Climate-only", "climate"]) - summaryResults[summaryResults$scenario == "Climate-only", "cost"]
((summaryResults[summaryResults$scenario == "Baseline", "climate"] -summaryResults[summaryResults$scenario == "Climate-only", "climate"]) - summaryResults[summaryResults$scenario == "Climate-only", "cost"])/1E9
((summaryResults[summaryResults$scenario == "Baseline", "climate"] -summaryResults[summaryResults$scenario == "Health + Climate", "climate"]) - summaryResults[summaryResults$scenario == "Health + Climate", "cost"])/1E9
(18-16)/16
(60-44)/44
(94-66)/66
mitCostSummary
coBenefits
(127-99)/99
library(openxlsx)
?read.xlsx
setwd("~/Documents/Carnegie Mellon/Box Sync/Research/CACES energy modeling/Model V4/Data inputs/renewables")
setwd("~/Documents/Carnegie Mellon/Box Sync/Research/CACES energy modeling/Model V4/Data inputs/renewables")
ghi <- read.xlsx("solarsummaries.xlsx", sheet="GHI County")
head(ghi)
# down-select to relevant columns (note: data is available by month but currently estimating annually)
ghi <- ghi[, c("County", "County.FIPS", "Annual.Average.(kWh/m2/day)",
"Annual.Average.Median.(kWh/m2/day)", "Annual.Average.Standard.Deviation.(kWh/m2/day)")]
head(ghi)
ghi$cf <- b0 + b1 * ghi$`Annual.Average.(kWh/m2/day)`
# regression of net CF on GHI based on LBNL study (see https://emp.lbl.gov/pv-capacity-factors)
# NCF = 0.0394632 x GHI + 0.029529 (assumes fixed-tilt)
b0 <- 0.029529
b1 <- 0.0394632
ghi$cf <- b0 + b1 * ghi$`Annual.Average.(kWh/m2/day)`
head(ghi)
hist(ghi$cf)
summary(ghi$cf)
# validate regression
with(ghi, plot(`Annual.Average.(kWh/m2/day)`, cf))
# validate regression
plot(ghi$`Annual.Average.(kWh/m2/day)`, ghi$cf))
# validate regression
plot(ghi$`Annual.Average.(kWh/m2/day)`, ghi$cf)
head(ghi)
# plot results on map to spot check
counties <- map_data("county", projection  = "albers", par = c(30,0))
library(maps)
library(mapproj)
library(ggplot2)
# plot results on map to spot check
counties <- map_data("county", projection  = "albers", par = c(30,0))
had(counties)
head(counties)
counties$polyname <- paste(counties$region, counties$subregion, sep = ",")
head(counties)
head(county.fips)
counties <- merge(counties, county.fips, by="polyname", all.x=T)  # county.fips included in maps package
head(counties)
head(ghi)
# merge with ghi data and sort
ghiPlot <- ghi[,c("County.FIPS", "cf")]
head(ghiPlot)
head(counties)
colnames(ghiPlot)[colnames(ghiPlot) == "County.FIPS"] <- "fips"
ghiPlot <- merge(counties, ghiPlot, by="fips")
ghiPlot <- county.plot[order(ghiPlot$group, ghiPlot$order),]
ghiPlot <- ghiPlot[order(ghiPlot$group, ghiPlot$order),]
# plot county choropleth
ggplot() + geom_polygon(data=ghiPlot, aes(x=long, y=lat, group = group, fill=cf), colour="black", size=0.1) +
scale_fill_continuous(low = "thistle2", high = "darkred", guide="colorbar") + theme_bw()  +
labs(fill = "Average CF", title = "", x="", y="") +
scale_y_continuous(breaks=c()) + scale_x_continuous(breaks=c()) + theme(panel.border =  element_blank()) +
geom_path(data = all_states, aes(x=long, y=lat, group = group), colour = "black")   # add state borders back in
# plot results on map to spot check
counties <- map_data("county", projection  = "albers", par = c(30,0))
states <-  map_data("state", projection  = "albers", par = c(30,0))
counties$polyname <- paste(counties$region, counties$subregion, sep = ",")
counties <- merge(counties, county.fips, by="polyname", all.x=T)  # county.fips included in maps package
# merge with ghi data and sort
ghiPlot <- ghi[,c("County.FIPS", "cf")]
colnames(ghiPlot)[colnames(ghiPlot) == "County.FIPS"] <- "fips"
ghiPlot <- merge(counties, ghiPlot, by="fips")
ghiPlot <- ghiPlot[order(ghiPlot$group, ghiPlot$order),]
# plot county choropleth
ggplot() + geom_polygon(data=ghiPlot, aes(x=long, y=lat, group = group, fill=cf), colour="black", size=0.1) +
scale_fill_continuous(low = "thistle2", high = "darkred", guide="colorbar") + theme_bw()  +
labs(fill = "Average CF", title = "", x="", y="") +
scale_y_continuous(breaks=c()) + scale_x_continuous(breaks=c()) + theme(panel.border =  element_blank()) +
geom_path(data = all_states, aes(x=long, y=lat, group = group), colour = "black")   # add state borders back in
# plot county choropleth
ggplot() + geom_polygon(data=ghiPlot, aes(x=long, y=lat, group = group, fill=cf), colour="black", size=0.1) +
scale_fill_continuous(low = "thistle2", high = "darkred", guide="colorbar") + theme_bw()  +
labs(fill = "Average CF", title = "", x="", y="") +
scale_y_continuous(breaks=c()) + scale_x_continuous(breaks=c()) + theme(panel.border =  element_blank()) +
geom_path(data = states, aes(x=long, y=lat, group = group), colour = "black")   # add state borders back in
ggsave("Annual solar CF.pdf", width = 8, height = 4)
head(ghi)
ghi[is.na(ghi$cf),]
# read in GHI measurements
ghi <- read.xlsx("solarsummaries.xlsx", sheet="GHI County")
head(ghi)
unique(ghi$State)
# drop AK and HI from data
ghi <- ghi[!(ghi$State %in% c("AK", "HI")),]
unique(ghi$State)
# read in GHI measurements
ghi <- read.xlsx("solarsummaries.xlsx", sheet="GHI County")
# drop AK and HI from data
ghi <- ghi[!(ghi$State %in% c("AK", "HI")),]
# down-select to relevant columns (note: data is available by month but currently estimating annually)
ghi <- ghi[, c("State", "County", "County.FIPS", "Annual.Average.(kWh/m2/day)",
"Annual.Average.Median.(kWh/m2/day)", "Annual.Average.Standard.Deviation.(kWh/m2/day)")]
# regression of net CF on GHI based on LBNL study (see https://emp.lbl.gov/pv-capacity-factors)
# NCF = 0.0394632 x GHI + 0.029529 (assumes fixed-tilt)
b0 <- 0.029529
b1 <- 0.0394632
ghi$cf <- b0 + b1 * ghi$`Annual.Average.(kWh/m2/day)`
# plot results on map to spot check
counties <- map_data("county", projection  = "albers", par = c(30,0))
states <-  map_data("state", projection  = "albers", par = c(30,0))
counties$polyname <- paste(counties$region, counties$subregion, sep = ",")
counties <- merge(counties, county.fips, by="polyname", all.x=T)  # county.fips included in maps package
# merge with ghi data and sort
ghiPlot <- ghi[,c("County.FIPS", "cf")]
colnames(ghiPlot)[colnames(ghiPlot) == "County.FIPS"] <- "fips"
ghiPlot <- merge(counties, ghiPlot, by="fips")
ghiPlot <- ghiPlot[order(ghiPlot$group, ghiPlot$order),]
# plot county choropleth
ggplot() + geom_polygon(data=ghiPlot, aes(x=long, y=lat, group = group, fill=cf), colour="black", size=0.1) +
scale_fill_continuous(low = "thistle2", high = "darkred", guide="colorbar") + theme_bw()  +
labs(fill = "Average CF", title = "", x="", y="") +
scale_y_continuous(breaks=c()) + scale_x_continuous(breaks=c()) + theme(panel.border =  element_blank()) +
geom_path(data = states, aes(x=long, y=lat, group = group), colour = "black")   # add state borders back in
ghi[is.na(ghi$cf),]
ghiPlot[is.na(ghiPlot$cf),]
head(ghiPlot)
# merge with ghi data and sort
ghiPlot <- ghi[,c("County.FIPS", "cf")]
colnames(ghiPlot)[colnames(ghiPlot) == "County.FIPS"] <- "fips"
ghiPlot <- merge(counties, ghiPlot, by="fips", all=T)
ghiPlot <- ghiPlot[order(ghiPlot$group, ghiPlot$order),]
ghiPlot[is.na(ghiPlot$cf),]
unique(ghiPlot[is.na(ghiPlot$cf), "polyname"])
# manually adjust some erroneous fips codes
unique(ghiPlot[is.na(ghiPlot$cf), "polyname"])
ghi[grepl("okaloosa", ghi$County),]
ghi[grepl("okaloosa", ghi$County, ignore.case = T),]
head(counties)
head(counties[counties$subregion == "okaloosa",])
tail(counties[counties$subregion == "okaloosa",])
# adjust some fips codes errors in the map data set
counties$fips[counties$subregion == "okaloosa", "fips"]
# adjust some fips codes errors in the map data set
counties$fips[counties$subregion == "okaloosa", "County.FIPS"]
# adjust some fips codes errors in the map data set
counties[counties$subregion == "okaloosa", "County.FIPS"]
# adjust some fips codes errors in the map data set
counties[counties$subregion == "okaloosa", "fips"]
ghi[grepl("st martin", ghi$County, ignore.case = T),]
head(ghi)
ghi[ghi$State == "LA",]
ghi[grepl("currituck", ghi$County, ignore.case = T),]
head(counties[counties$subregion == "currituck",])
head(counties[counties$subregion == "galveston",])
ghi[grepl("galvestonck", ghi$County, ignore.case = T),]
ghi[grepl("galveston", ghi$County, ignore.case = T),]
ghi[grepl("accomack", ghi$County, ignore.case = T),]
ghi[grepl("pierce", ghi$County, ignore.case = T),]
ghi[grepl("san juan", ghi$County, ignore.case = T),]
# Formatting of NREL capacity factor data
# Created August 3, 2019
# Brian Sergi
library(openxlsx)
library(maps)
library(mapproj)
library(ggplot2)
# Note: set working directory to file location
## Solar ####
# county-level annual capacity factors (CF) derived from combination of global horiztonal irradiance (GHI)
# measurements and regression of GHI and CF
# read in GHI measurements
ghi <- read.xlsx("solarsummaries.xlsx", sheet="GHI County")
# drop AK and HI from data
ghi <- ghi[!(ghi$State %in% c("AK", "HI")),]
# down-select to relevant columns (note: data is available by month but currently estimating annually)
ghi <- ghi[, c("State", "County", "County.FIPS", "Annual.Average.(kWh/m2/day)",
"Annual.Average.Median.(kWh/m2/day)", "Annual.Average.Standard.Deviation.(kWh/m2/day)")]
# regression of net CF on GHI based on LBNL study (see https://emp.lbl.gov/pv-capacity-factors)
# NCF = 0.0394632 x GHI + 0.029529 (assumes fixed-tilt)
b0 <- 0.029529
b1 <- 0.0394632
ghi$cf <- b0 + b1 * ghi$`Annual.Average.(kWh/m2/day)`
# plot results on map to spot check
counties <- map_data("county", projection  = "albers", par = c(30,0))
states <-  map_data("state", projection  = "albers", par = c(30,0))
counties$polyname <- paste(counties$region, counties$subregion, sep = ",")
counties <- merge(counties, county.fips, by="polyname", all.x=T)  # county.fips included in maps package
# adjust some fips code errors in the map data set
# [1] "florida,okaloosa"         "louisiana,st martin"      "north carolina,currituck" "texas,galveston"
# [5] "virginia,accomack"        "washington,pierce"        "washington,san juan"
counties[counties$polyname == "florida,okaloosa", "fips"] <- 12091
counties[counties$polyname == "ouisiana,st martin", "fips"] <- 22099
counties[counties$polyname == "north carolina,currituck", "fips"] <- 37053
counties[counties$polyname == "texas,galveston", "fips"] <- 48167
counties[counties$polyname == "virginia,accomack", "fips"] <- 51001
counties[counties$polyname == "washington,pierce", "fips"] <- 53053
counties[counties$polyname == "washington,san juan", "fips"] <- 53055
# merge with ghi data and sort
ghiPlot <- ghi[,c("County.FIPS", "cf")]
colnames(ghiPlot)[colnames(ghiPlot) == "County.FIPS"] <- "fips"
ghiPlot <- merge(counties, ghiPlot, by="fips", all=T)
ghiPlot <- ghiPlot[order(ghiPlot$group, ghiPlot$order),]
# manually adjust some erroneous fips codes
unique(ghiPlot[is.na(ghiPlot$cf), "polyname"])
# plot county choropleth
ggplot() + geom_polygon(data=ghiPlot, aes(x=long, y=lat, group = group, fill=cf), colour="black", size=0.1) +
scale_fill_continuous(low = "thistle2", high = "darkred", guide="colorbar") + theme_bw()  +
labs(fill = "Average CF", title = "", x="", y="") +
scale_y_continuous(breaks=c()) + scale_x_continuous(breaks=c()) + theme(panel.border =  element_blank()) +
geom_path(data = states, aes(x=long, y=lat, group = group), colour = "black")   # add state borders back in
ggsave("Annual solar CF.pdf", width = 8, height = 4)
## Wind ####
# Formatting of NREL capacity factor data
# Created August 3, 2019
# Brian Sergi
library(openxlsx)
library(maps)
library(mapproj)
library(ggplot2)
# Note: set working directory to file location
## Solar ####
# county-level annual capacity factors (CF) derived from combination of global horiztonal irradiance (GHI)
# measurements and regression of GHI and CF
# read in GHI measurements
ghi <- read.xlsx("solarsummaries.xlsx", sheet="GHI County")
# drop AK and HI from data
ghi <- ghi[!(ghi$State %in% c("AK", "HI")),]
# down-select to relevant columns (note: data is available by month but currently estimating annually)
ghi <- ghi[, c("State", "County", "County.FIPS", "Annual.Average.(kWh/m2/day)",
"Annual.Average.Median.(kWh/m2/day)", "Annual.Average.Standard.Deviation.(kWh/m2/day)")]
# regression of net CF on GHI based on LBNL study (see https://emp.lbl.gov/pv-capacity-factors)
# NCF = 0.0394632 x GHI + 0.029529 (assumes fixed-tilt)
b0 <- 0.029529
b1 <- 0.0394632
ghi$cf <- b0 + b1 * ghi$`Annual.Average.(kWh/m2/day)`
# plot results on map to spot check
counties <- map_data("county", projection  = "albers", par = c(30,0))
states <-  map_data("state", projection  = "albers", par = c(30,0))
counties$polyname <- paste(counties$region, counties$subregion, sep = ",")
counties <- merge(counties, county.fips, by="polyname", all.x=T)  # county.fips included in maps package
# adjust some fips code errors in the map data set
# [1] "florida,okaloosa"         "louisiana,st martin"      "north carolina,currituck" "texas,galveston"
# [5] "virginia,accomack"        "washington,pierce"        "washington,san juan"
counties[counties$polyname == "florida,okaloosa", "fips"] <- 12091
counties[counties$polyname == "louisiana,st martin", "fips"] <- 22099
counties[counties$polyname == "north carolina,currituck", "fips"] <- 37053
counties[counties$polyname == "texas,galveston", "fips"] <- 48167
counties[counties$polyname == "virginia,accomack", "fips"] <- 51001
counties[counties$polyname == "washington,pierce", "fips"] <- 53053
counties[counties$polyname == "washington,san juan", "fips"] <- 53055
# merge with ghi data and sort
ghiPlot <- ghi[,c("County.FIPS", "cf")]
colnames(ghiPlot)[colnames(ghiPlot) == "County.FIPS"] <- "fips"
ghiPlot <- merge(counties, ghiPlot, by="fips", all=T)
ghiPlot <- ghiPlot[order(ghiPlot$group, ghiPlot$order),]
# manually adjust some erroneous fips codes
unique(ghiPlot[is.na(ghiPlot$cf), "polyname"])
# plot county choropleth
ggplot() + geom_polygon(data=ghiPlot, aes(x=long, y=lat, group = group, fill=cf), colour="black", size=0.1) +
scale_fill_continuous(low = "thistle2", high = "darkred", guide="colorbar") + theme_bw()  +
labs(fill = "Average CF", title = "", x="", y="") +
scale_y_continuous(breaks=c()) + scale_x_continuous(breaks=c()) + theme(panel.border =  element_blank()) +
geom_path(data = states, aes(x=long, y=lat, group = group), colour = "black")   # add state borders back in
ggsave("Annual solar CF.pdf", width = 8, height = 4)
## Wind ####
